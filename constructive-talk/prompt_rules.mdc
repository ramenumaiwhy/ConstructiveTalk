# プロンプト記録ルール 📝

## 基本ルール

- 新しいファイルを作成するたびに、対応するプロンプトファイルを作成します
- プロンプトファイルの名前は、元のファイル名の後ろに「.prompt.md」を付けます
  - 例：`Todo.tsx` → `Todo.prompt.md`
  - 例：`UserProfile.ts` → `UserProfile.prompt.md`

## プロンプトファイルの内容 📋

各プロンプトファイルには以下の情報を含めます：

```markdown
# [ファイル名]のプロンプト記録

## 基本情報
- 作成日時：[YYYY-MM-DD HH:mm]
- 関連ファイル：[ファイルへのパス]
- 作成目的：[このファイルを作成する理由を簡単に説明]

## プロンプト履歴

### 初期作成時のプロンプト全文
<details>
<summary>ユーザーの質問・要望</summary>

```
[ユーザーからの質問や要望を完全な形で記載]
```
</details>

<details>
<summary>AIの応答</summary>

```
[AIの応答を完全な形で記載]
```
</details>

<details>
<summary>生成されたコード</summary>

```[言語]
[生成されたコードを完全な形で記載]
```
</details>

### 修正履歴
#### 修正1（YYYY-MM-DD HH:mm）

<details>
<summary>修正の目的</summary>
[修正が必要になった背景や理由]
</details>

<details>
<summary>ユーザーの質問・要望</summary>

```
[修正時のユーザーからの質問や要望を完全な形で記載]
```
</details>

<details>
<summary>AIの応答</summary>

```
[修正時のAIの応答を完全な形で記載]
```
</details>

<details>
<summary>変更内容</summary>

```diff
[変更内容をdiff形式で記載]
```
</details>
```

## 自動化の実装 🤖

### 1. Git Hooks の設定

`.git/hooks/pre-commit`に以下のスクリプトを追加：

```bash
#!/bin/bash

# 変更されたファイルを取得
changed_files=$(git diff --cached --name-only)

# .tsxや.tsファイルの変更をチェック
for file in $changed_files; do
  if [[ $file =~ \.(tsx|ts)$ ]]; then
    prompt_file="${file}.prompt.md"
    
    # プロンプトファイルが存在しない場合、テンプレートを作成
    if [ ! -f "$prompt_file" ]; then
      echo "Creating prompt file for $file"
      cat > "$prompt_file" << EOL
# ${file##*/}のプロンプト記録

## 基本情報
- 作成日時：$(date '+%Y-%m-%d %H:%M')
- 関連ファイル：$file
- 作成目的：[TODO: 目的を記入]

## プロンプト履歴

### 初期作成時のプロンプト全文
[TODO: プロンプト履歴を記入]
EOL
      git add "$prompt_file"
    fi
  fi
done
```

### 2. VSCode拡張機能の開発（推奨）

- ファイル作成/編集時に自動的にプロンプトファイルを作成/更新
- プロンプト履歴の記録を支援
- diff形式での変更履歴の自動生成

### 3. CI/CDパイプラインでの検証

- プロンプトファイルの存在チェック
- フォーマットの検証
- 必要な情報が含まれているかの確認

## プロンプトファイルの保存場所 📂

- プロンプトファイルは、元のファイルと同じディレクトリに保存
- バージョン管理システムで追跡可能に

## プロンプト記録の目的 🎯

1. 開発プロセスの透明性確保
   - 各ファイルがなぜ、どのように作られたのかの完全な記録
   - チーム内での知識共有の促進

2. 品質管理と改善
   - プロンプトの効果の分析
   - パターンの発見と最適化

3. チーム学習の促進
   - 効果的なプロンプトの共有
   - ベストプラクティスの確立

## 注意事項 ⚠️

- プロンプトは要約せず、完全な形で記録
- 変更履歴は差分（diff）形式で記録
- 自動化ツールを積極的に活用
- 定期的なレビューと更新を実施

Remember:
- プロンプトは重要な開発資産です 📚
- 完全な記録が将来の改善につながります 🚀
- チーム全体でプロンプトの知見を共有しましょう 💡 